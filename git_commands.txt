
Репозиторий - место где сохраняется весь код и история его изменений.
Репозитории бывают:
Локальные - сохраняются только на ПК
при создании новой branch, она существует только локально
main или master - основная ветка
Удаленные (origin - означает удаленный репозиторий) - сохраняется на одном из онлайн сервисов Git

git clone <url> - позволяет скопировать данные из удаленного репозитория на ПК
<url> - ссылка на удаленный репозиторий. Ссылка находится в учетной записи Git
вкладка <>Code (HTTPS):
https://github.com/kvitkoanton/Zaur-Tregulov-Oracle-Test-Preparation-.git

git status - отображение текущего состояния проекта

git add .  - добавляет все изменения в текущем каталоге и его подкаталогах в Git
git add test.txt - добавление конкретного файл в Git
git add test1.txt test2.txt - добавление конкретных нескольких файлов в Git

git commit -m "Сообщение коммита" - точка сохранения. Фиксирует все изменения, добавленные в индекс.
Сохраняет их в локальном репозитории. Сообщение коммита должно кратко описывать внесенные изменения.
git commit ./test.txt -m "Add test file"
	./test.txt - добавление конкретного файла в commit
	"Add test file" - в кавычках описание commit (только на Английском)
git commit --amend -m "Add test.txt file" - редактирование описания последнего commit
	"Add test.txt file" скорректированное сообщение
git commit -am <message>- сделать commit всех измененных файлов
	-a (all)
	-m (message)

git log - вывод списка commit в обратном хронологическом порядке
	j и k - навигация по commit
	q - выход
git log --oneline - вывод commit в одну строку с коротким сообщением
git log --graph - вывод commit в графическом виде веток и объединение commit

git branch - отображение списка имеющихся веток
git branch <branch name> - создание новой ветки
git checkout <branch name> - переключение на ветку "branch name"

git checkout -b <branch name> - создает ветку "branch name" с переключением на нее. Замещает 2 команды (git branch <branch name> + git checkout <branch name>)


git merge <branch name> - объединение изменение с указанной ветки в основную ветку (main/master)

git fetch - получение обновлений из удаленного репозитория, но без объединения с локальными изменениями

git pull origin <branch name> - получение и объединение обновлений c удаленного репозитория (синхронизация локальной ветки с origin)

git push origin <branch name> - отправление локальных изменений в origin (push - publish (публикация))

git push --set-upstream origin <branch name> используется в Git для отправки вашей локальной ветки в удалённый репозиторий и установки привязки (upstream) для этой ветки.
	git push - отправляет зафиксированные изменения из вашего локального репозитория в удалённый репозиторий.
	--set-upstream -этот параметр устанавливает привязку (upstream) для текущей ветки, связывая локальную ветку с указанной удалённой веткой.
	origin - это имя удалённого репозитория. По умолчанию origin указывает на репозиторий, из которого вы изначально клонировали проект.
	<branch name> - имя ветки, которую вы отправляете в удалённый репозиторий.

git branch --unset-upstream - отмена привязки

git stash - временное скрытие изменений (скрытие в дереве проекта)
git stash apply - восстановление скрытых изменений (восстановление в дереве проекта)

Отмена изменений:
git reset -- hard <commit> - позволяет отменить изменения в истории commit, удаляет из истории commit, переходит к прошлому commit
	<commit> - hash коммита, hash к каждому commit можно посмотреть с помощью команды git log
git reset -- hard origin/main - возвращение к версии удаленного репозитория

git reset -- soft <commit> - возвращение изменений в состояние "незакомиченных"

git rebase <branch> - позволяет изменять историю commit, перенося commit с одной ветки в другую

git cherry-pick <commit> позволяет выбрать отдельные commit с одной ветки и применить их к другой


Работа с тегами:
git tag <tag_name> - создание простого тега для последнего commit в текущей ветке
git tag -a <tag_name> -m "<message>" - создание аннотированного тега с сообщением
git tag -a <tag_name> <commit_id>" - добавление тега в конкретный commit

Параметры конфигурации (позволяет настраивать параметры конфигурации Git, такин как имя пользователя, электронная почта, настройка редактора и т.д.):
git config <property> - просмотр конфигурации
	<property> - название конфигурации:
		user.name (Имя пользователя, которое будет указано в коммитах)
		user.email (Email пользователя, который будет указан в коммитах)
		user.signingkey (Ключ GPG для подписи коммитов)
		и т.д.

git config <property> <value> - установка значения конфигурации в текущем репозитории
	<value> - новое значение конфигурации

git config --global <property> <value> - установка значения конфигурации глобально
git config --list --show-origin - просмотр всех конфигураций и источника их текущих значений

git config --global <property> <value> - установка значения конфигурации глобально. Это опция, которая указывает, что настройки должны применяться глобально, то есть ко всем репозиториям, которыми ты управляешь на данном компьютере. Эти настройки сохраняются в файле ~/.gitconfig (в домашней директории пользователя).
	Пример:
	git config --global user.name "Ваше Имя"
	git config --global user.email "ваш.email@example.com"


git config --list --show-origin - просмотр всех конфигураций и источника их текущих значений

Основная очередность команд:
git add ./text.txt
git commit ./text.txt. -m "New file for development"
git push origin <branch name>
git pull origin <branch name>

Команды консоли
ls - (list) показывает список файлов в текущей директории
cd <name_directory> - переход в директорию с именем <name_directory>
touch <name.html> - создание файла с именем <name.html>
code . - открытие файла

